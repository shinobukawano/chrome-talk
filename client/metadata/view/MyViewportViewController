{
    "type": "Ext.app.ViewController",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userAlias": "myviewport",
        "designer|userClassName": "MyViewportViewController"
    },
    "designerId": "7fd7b632-1a49-4eab-b690-e17c54d6eb6d",
    "cn": [
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "connect",
                "implHandler": [
                    "var me = this;",
                    "var contact = this.getViewModel().get('contact');",
                    "",
                    "var result = contact.validate();",
                    "",
                    "if (result.length > 0) {",
                    "    Ext.Msg.alert(CT.Consts.APP_TITLE,",
                    "                  'The e-mail address seems invalid. <br>' +",
                    "                  'Please confirm it.');",
                    "    return;",
                    "}",
                    "",
                    "var contacts = this.getStore('Contacts');",
                    "contacts.add(contact);",
                    "contacts.sync();",
                    "",
                    "var panel = this.lookupReference('displayPanel');",
                    "panel.getEl().mask('Connecting..');",
                    "",
                    "var button = this.lookupReference('connectButton');",
                    "button.setText(CT.Consts.BUTTON_DISCONNECT_TEXT);",
                    "",
                    "// WebRTC",
                    "",
                    "if (!CT.peerStarted && CT.localStream) {",
                    "    me.sendOffer();",
                    "    CT.peerStarted = true;",
                    "} else {",
                    "    alert(\"Local stream not running yet - try again.\");",
                    "}",
                    "",
                    "",
                    "// Ext.Ajax.request({",
                    "//     url: CT.Conf.SERVER_URL + '/connect',",
                    "//     success: function(res) {",
                    "//         console.log(res);",
                    "//     },",
                    "//     failure: function(res) {",
                    "//         Ext.Msg.alert(CT.Consts.APP_TITLE, 'Error!', function() {",
                    "//             me.disconnect();",
                    "//         });",
                    "//     }",
                    "// });",
                    ""
                ]
            },
            "name": "connect",
            "designerId": "c7cc39e3-9dc3-4d77-8b99-86df92729157"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "disconnect",
                "implHandler": [
                    "var panel = this.lookupReference('displayPanel');",
                    "panel.getEl().unmask();",
                    "",
                    "var button = this.lookupReference('connectButton');",
                    "button.setText(CT.Consts.BUTTON_CONNECT_TEXT);"
                ]
            },
            "name": "disconnect",
            "designerId": "95ab5ce2-1f5e-4b66-aae5-d48b375f7457"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "isConnecting",
                "implHandler": [
                    "var button = this.lookupReference('connectButton');",
                    "return button.getText() === CT.Consts.BUTTON_DISCONNECT_TEXT;"
                ]
            },
            "name": "isConnecting",
            "designerId": "1137e74f-84a8-4e0c-bbe8-d472b8352df3"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "sendOffer",
                "implHandler": [
                    "var me = this;",
                    "peerConnection = me.prepareNewConnection();",
                    "",
                    "peerConnection.createOffer(function (sessionDescription) { // in case of success",
                    "    peerConnection.setLocalDescription(sessionDescription);",
                    "    console.log(\"Sending: SDP\");",
                    "    console.log(sessionDescription);",
                    "    me.sendSDP(sessionDescription);",
                    "}, function () { // in case of error",
                    "    console.log(\"Create Offer failed\");",
                    "}, CT.mediaConstraints);",
                    ""
                ]
            },
            "name": "sendOffer",
            "designerId": "d5ab78db-a956-484b-b2b4-44cddca371cc"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "prepareNewConnection",
                "implHandler": [
                    "var me = this;",
                    "var pc_config = {\"iceServers\":[]};",
                    "var peer = null;",
                    "",
                    "try {",
                    "    peer = new webkitRTCPeerConnection(pc_config);",
                    "} catch (e) {",
                    "    console.log(\"Failed to create peerConnection, exception: \" + e.message);",
                    "}",
                    "",
                    "// send any ice candidates to the other peer",
                    "peer.onicecandidate = function (evt) {",
                    "    if (evt.candidate) {",
                    "        console.log(evt.candidate);",
                    "        me.sendCandidate({type: \"candidate\",",
                    "                       sdpMLineIndex: evt.candidate.sdpMLineIndex,",
                    "                       sdpMid: evt.candidate.sdpMid,",
                    "                       candidate: evt.candidate.candidate}",
                    "                     );",
                    "    } else {",
                    "        console.log(\"End of candidates. ------------------- phase=\" + evt.eventPhase);",
                    "    }",
                    "};",
                    "",
                    "console.log('Adding local stream...');",
                    "peer.addStream(CT.localStream);",
                    "",
                    "peer.addEventListener(\"addstream\", onRemoteStreamAdded, false);",
                    "peer.addEventListener(\"removestream\", onRemoteStreamRemoved, false);",
                    "",
                    "// when remote adds a stream, hand it on to the local video element",
                    "function onRemoteStreamAdded(event) {",
                    "    console.log(\"Added remote stream\");",
                    "    // remoteVideo.src = window.webkitURL.createObjectURL(event.stream);",
                    "",
                    "    Ext.getCmp('webRTC').attach(stream);",
                    "}",
                    "",
                    "// when remote removes a stream, remove it from the local video element",
                    "function onRemoteStreamRemoved(event) {",
                    "    console.log(\"Remove remote stream\");",
                    "    // remoteVideo.src = \"\";",
                    "    Ext.getCmp('webRTC').remove();",
                    "}",
                    "",
                    "return peer;"
                ]
            },
            "name": "prepareNewConnection",
            "designerId": "9e6ff4d0-dcde-4562-910e-3d6758e05822"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "candidate"
                ],
                "fn": "sendCandidate",
                "implHandler": [
                    "var CR = String.fromCharCode(13);",
                    "",
                    "var text = JSON.stringify(candidate);",
                    "console.log(\"---sending candidate text ---\");",
                    "console.log(text);",
                    "",
                    "CT.textForSendICEvalue = (CT.textForSendICEvalue + CR + '------ ICE Candidate -------' + CR + text + CR);",
                    "// CT.textForSendICE.scrollTop = CT.textForSendICE.scrollHeight;",
                    ""
                ]
            },
            "name": "sendCandidate",
            "designerId": "ba80b57e-9317-440a-920b-beca6b0f191d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "sdp"
                ],
                "fn": "sendSDP",
                "implHandler": [
                    "var text = JSON.stringify(sdp);",
                    "console.log(\"---sending sdp text ---\");",
                    "console.log(text);",
                    "",
                    "CT.textForSendSDPvalue = text;",
                    ""
                ]
            },
            "name": "sendSDP",
            "designerId": "bf233b33-f760-4240-97f2-80e1dcbe49d8"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "evt"
                ],
                "fn": "onOffer",
                "implHandler": [
                    "var me = this;",
                    "",
                    "console.log(\"Received offer...\");",
                    "console.log(evt);",
                    "me.setOffer(evt);",
                    "me.sendAnswer(evt);",
                    ""
                ]
            },
            "name": "onOffer",
            "designerId": "e92374f4-ba73-41ca-9c30-edaf2fb28a83"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "evt"
                ],
                "fn": "setOffer",
                "implHandler": [
                    "if (CT.peerConnection) {",
                    "    console.error('peerConnection alreay exist!');",
                    "}",
                    "CT.peerConnection = prepareNewConnection();",
                    "CT.peerConnection.setRemoteDescription(new RTCSessionDescription(evt));"
                ]
            },
            "name": "setOffer",
            "designerId": "34e8e566-a903-46bb-95ba-be2973a843c5"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "evt"
                ],
                "fn": "sendAnswer",
                "implHandler": [
                    "var me = this;",
                    "console.log('sending Answer. Creating remote session description...' );",
                    "if (! CT.peerConnection) {",
                    "    console.error('peerConnection NOT exist!');",
                    "    return;",
                    "}",
                    "",
                    "CT.peerConnection.createAnswer(function (sessionDescription) { // in case of success",
                    "    peerConnection.setLocalDescription(sessionDescription);",
                    "    console.log(\"Sending: SDP\");",
                    "    console.log(sessionDescription);",
                    "    me.sendSDP(sessionDescription);",
                    "}, function () { // in case of error",
                    "    console.log(\"Create Answer failed\");",
                    "}, CT.mediaConstraints);",
                    ""
                ]
            },
            "name": "sendAnswer",
            "designerId": "9c44fa75-1630-4d84-88fd-212e573b1287"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "evt"
                ],
                "fn": "onAnswer",
                "implHandler": [
                    "console.log(\"Received Answer...\")",
                    "console.log(evt);",
                    "this.setAnswer(evt);"
                ]
            },
            "name": "onAnswer",
            "designerId": "3864fca2-0ece-4164-a11b-5dee00ce10bd"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "evt"
                ],
                "fn": "setAnswer",
                "implHandler": [
                    "if (! peerConnection) {",
                    "    console.error('peerConnection NOT exist!');",
                    "    return;",
                    "}",
                    "CT.peerConnection.setRemoteDescription(new RTCSessionDescription(evt));"
                ]
            },
            "name": "setAnswer",
            "designerId": "3a148b07-59e9-4af1-aa6b-428e4a6f711e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "stop",
                "implHandler": [
                    "peerConnection.close();",
                    "peerConnection = null;",
                    "peerStarted = false;    "
                ]
            },
            "name": "stop",
            "designerId": "73e1df37-31c2-4fff-99f6-95b88d0d809a"
        }
    ]
}