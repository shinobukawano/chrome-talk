/*
 * File: app.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

// @require @packageOverrides
Ext.Loader.setConfig({

});


Ext.application({

    requires: [
        'CT.util.Consts',
        'CT.util.Conf'
    ],
    models: [
        'Contact'
    ],
    views: [
        'MyViewport',
        'WebRTC'
    ],
    name: 'CT',

    launch: function() {
        Ext.create('CT.view.MyViewport');
        var peerConnection = null;
        var peerStarted = false;


        // create socket
        var socketReady = false;
        // var socket = io.connect(CT.util.Conf.SERVER_URL);

        // socket: channel connected
        // socket.on('connect', onOpened)
        //     .on('message', onMessage);

        // function onOpened(evt) {
        //     console.log('socket opened.');
        //     socketReady = true;
        // }

        //////////////////////////////////////////////////////////////

        // function onOffer(evt) {
        //     console.log("Received offer...");
        //     console.log(evt);
        //     setOffer(evt);
        //     sendAnswer(evt);
        // }

        // function setOffer(evt) {
        //     if (peerConnection) {
        //       console.error('peerConnection alreay exist!');
        //     }
        //     peerConnection = prepareNewConnection();
        //     peerConnection.setRemoteDescription(new RTCSessionDescription(evt));
        // }

        // function sendAnswer(evt) {
        //     console.log('sending Answer. Creating remote session description...' );
        //     if (! peerConnection) {
        //       console.error('peerConnection NOT exist!');
        //       return;
        //     }

        //     peerConnection.createAnswer(function (sessionDescription) { // in case of success
        //       peerConnection.setLocalDescription(sessionDescription);
        //       console.log("Sending: SDP");
        //       console.log(sessionDescription);
        //       sendSDP(sessionDescription);
        //     }, function () { // in case of error
        //       console.log("Create Answer failed");
        //     }, mediaConstraints);
        // }

        // function sendSDP(sdp) {
        //     var text = JSON.stringify(sdp);
        //     console.log("---sending sdp text ---");
        //     console.log(text);

        //     textForSendSDP.value = text;

        //     // send via socket
        //     socket.json.send(sdp);
        // }

        //////////////////////////////////////////////////////////////

        // function onAnswer(evt) {
        //     console.log("Received Answer...");
        //     console.log(evt);
        //     setAnswer(evt);
        // }

        // function setAnswer(evt) {
        //     if (! peerConnection) {
        //       console.error('peerConnection NOT exist!');
        //       return;
        //     }
        //     peerConnection.setRemoteDescription(new RTCSessionDescription(evt));
        // }

        //////////////////////////////////////////////////////////////

        // function onCandidate(evt) {
        //     var candidate = new RTCIceCandidate({
        //         sdpMLineIndex:evt.sdpMLineIndex,
        //         sdpMid:evt.sdpMid,
        //         candidate:evt.candidate});
        //     console.log("Received Candidate...");
        //     console.log(candidate);
        //     peerConnection.addIceCandidate(candidate);
        // }

        // function sendCandidate(candidate) {
        //     var text = JSON.stringify(candidate);
        //     console.log("---sending candidate text ---");
        //     console.log(text);

        //     textForSendICE.value = (textForSendICE.value + CR + iceSeparator + CR + text + CR);
        //     textForSendICE.scrollTop = textForSendICE.scrollHeight;

        //     // send via socket
        // 	socket.json.send(candidate); // <--- ここを追加
        // }

        // ---------------------- connection handling -----------------------

        // function prepareNewConnection() {
        //     var pc_config = {"iceServers":[]};
        //     var peer = null;
        //     try {
        //         peer = new webkitRTCPeerConnection(pc_config);
        //     } catch (e) {
        //         console.log("Failed to create peerConnection, exception: " + e.message);
        //     }

        //     // send any ice candidates to the other peer
        //     peer.onicecandidate = function (evt) {
        //         if (evt.candidate) {
        //             console.log(evt.candidate);
        //             sendCandidate({type: "candidate",
        //                            sdpMLineIndex: evt.candidate.sdpMLineIndex,
        //                            sdpMid: evt.candidate.sdpMid,
        //                            candidate: evt.candidate.candidate}
        //                          );
        //         } else {
        //             console.log("End of candidates. ------------------- phase=" + evt.eventPhase);
        //         }
        //     };

        //     console.log('Adding local stream...');
        //     peer.addStream(localStream);

        //     peer.addEventListener("addstream", onRemoteStreamAdded, false);
        //     peer.addEventListener("removestream", onRemoteStreamRemoved, false);

        //     // when remote adds a stream, hand it on to the local video element
        //     function onRemoteStreamAdded(event) {
        //         console.log("Added remote stream");
        //         remoteVideo.src = window.webkitURL.createObjectURL(event.stream);
        //     }

        //     // when remote removes a stream, remove it from the local video element
        //     function onRemoteStreamRemoved(event) {
        //         console.log("Remove remote stream");
        //         remoteVideo.src = "";
        //     }

        //     return peer;
        // }


        //////////////////////////////////////////////////////////////

        // function onOffer(evt) {
        //     console.log("Received offer...");
        //     console.log(evt);
        //     setOffer(evt);
        //     sendAnswer(evt);
        //     peerStarted = true;  // <--- ここを追加
        // }

        // function connect() {
        //     if (!peerStarted && localStream && socketReady) { // <--- ここを変更
        //       sendOffer();
        //       peerStarted = true;
        //     } else {
        //       alert("Local stream not running yet - try again.");
        //     }
        // }

        // function stop() {
        //     peerConnection.close();
        //     peerConnection = null;
        //     peerStarted = false;
        // }

        //////////////////////////////////////////////////////////////

        // socket: accept connection request
        // function onMessage(evt) {
        //     if (evt.type === 'offer') {
        //         console.log("Received offer, set offer, sending answer....");
        //         onOffer(evt);
        //     } else if (evt.type === 'answer' && peerStarted) {
        //         console.log('Received answer, settinng answer SDP');
        //         onAnswer(evt);
        //     } else if (evt.type === 'candidate' && peerStarted) {
        //         console.log('Received ICE candidate...');
        //         onCandidate(evt);
        //     } else if (evt.type === 'user dissconnected' && peerStarted) {
        //         console.log("disconnected");
        //         stop();
        //     }
        // }
    }

});
